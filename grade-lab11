#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from gradelib import *

r = Runner(save("jos.out"),
           stop_breakpoint("cons_getc"))

@test(15, "spawn via spawnhello")
def test_spawn():
    r.user_test("spawnhello")
    r.match('i am parent environment 00001001',
            'hello, world',
            'i am environment 00001002',
            'No runnable environments in the system!')

@test(15, "PTE_SHARE [testpteshare]")
def test_pte_share():
    r.user_test("testpteshare")
    r.match('fork handles PTE_SHARE right',
            'spawn handles PTE_SHARE right')

@test(10, "PTE_SHARE [testfdsharing]")
def test_fd_share():
    r.user_test("testfdsharing")
    r.match('read in child succeeded',
            'read in parent succeeded')

@test(15, "start the shell [icode]")
def test_icode():
    r.user_test("icode")
    r.match('icode: read /motd',
            'This is /motd, the message of the day.',
            'icode: spawn /init',
            'init: running',
            'init: data seems okay',
            'icode: exiting',
            'init: bss seems okay',
            "init: args: 'init' 'initarg1' 'initarg2'",
            'init: running sh',
            '\$ ')

@test(30)
def test_testshell():
    r.user_test("testshell", timeout=600)
    r.match("shell ran correctly")

def gen_primes(n):
    rest = range(2, n)
    while rest:
        yield rest[0]
        rest = [n for n in rest if n % rest[0]]

@test(15)
def test_primespipe():
    r.user_test("primespipe", stop_on_line("[0-9]{3}$"), timeout=600)
    primes = set(gen_primes(100))
    nonprimes = set(range(100)) - primes
    r.match(no=["%d$" % np for np in nonprimes],
            *["%d$" % p for p in primes])

run_tests()
